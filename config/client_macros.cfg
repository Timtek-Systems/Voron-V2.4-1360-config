# User defined macros

[include input_shaper_tuning.cfg]
[include filament_dryer.cfg]
[include PA_Tuner.cfg]

[gcode_macro PREHEAT]
description: Preheat the bed, chamber and hot end
gcode:
  {% set BedTemperature = params.BED | default(60) | int %}
  {% set ExtruderTemperature = params.EXTRUDER | default(180) | int %}
  {% set ChamberTemperature = params.CHAMBER | default(40) | int %}
  PRINTER_STATE_PREHEAT
  UPDATE_DELAYED_GCODE ID=DELAYED_SHUTDOWN DURATION=0  
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BedTemperature}
  M104 S{ExtruderTemperature} ; set standby extruder temp
  SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={ChamberTemperature} min_speed=0.08
  M106 S255 ; Part cooling fan full speed (to waft air around the chamber)
  SET_FAN_SPEED FAN=bed SPEED=1.0
  G28 X Y Z
  CUBE_CENTER


[gcode_macro START_PRINT]
description: Ready the printer for printing.
gcode:
  {% set BedTemperature = params.BED_TEMPERATURE | default(60) | int %}
  {% set ExtruderTemperature = params.EXTRUDER_TEMPERATURE | default(210) | int %}
  {% set ExtruderStandbyTemperature = params.EXTRUDER_STANDBY_TEMPERATURE | default(170) | int %}
  {% set ChamberTemperature = params.CHAMBER_TEMPERATURE | default(20) | int %}

  UPDATE_DELAYED_GCODE ID=DELAYED_SHUTDOWN DURATION=0  
  PRINTER_STATE_STARTING
  KINEMATICS_SAFE_DEFAULTS
  CLEAR_PAUSE
  M117 Initializing
  G90 ; use absolute coordinates
  G92 E0.0 ; Reset E
  M83 ; extruder relative mode
  M106 S128 ; Part cooling fan on to protect cooling ducts and probes
  M140 S{BedTemperature} ; set bed temp
  M104 S{ExtruderStandbyTemperature} ; set standby extruder temp
  SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={ChamberTemperature} min_speed=0
  SET_FAN_SPEED FAN=bed SPEED=0.5 ; chamber recirculation fan just sufficient to maintain chamber temperature
    {% if not 'xyz' in printer.toolhead.homed_axes %}
    G28 X Y Z ; Home but only if needed.
  {% endif %}
  ; Forc quad gantry levelling because the bed changes shape during preheat
  { action_respond_info("Performing quad gantry levelling") }
  M117 Gantry Levelling
  SET_GCODE_OFFSET Z=0 ; Clear out any previous Z offset
  QUAD_GANTRY_LEVEL
  { action_respond_info("Wait for heaters") }
  M117 Heating
  move_to_purge_bucket ; while we wait for the hot end to heat up
  M117 Wait bed
  M190 S{BedTemperature} ; wait for bed temp
  M104 S{ExtruderTemperature} ; set first layer extruder temp
  M117 Wait Nozzle
  M109 S{ExtruderTemperature} ; wait for extruder temp
  { action_respond_info("Purging and cleaning nozzle") }
  M117 Purge/Clean
  CLEAN_NOZZLE ; Purge and wipe
    { action_respond_info("Calibrating Z offset") }
  M117 Calibrate Z
  G0 Y300 X231 F12000
  G28 Z
  CALIBRATE_Z FORCE=1
  G0 Z10
  CENTER
  G92 E0.0
  PRINTER_STATE_PRINTING
  M117
  ; Increase machine limits from safe defaults for printing.
  SET_VELOCITY_LIMIT ACCEL=7000 ACCEL_TO_DECEL=500 VELOCITY=300
  { action_respond_info("Startup completed - printing") }

[gcode_macro CANCEL_PRINT]
description: Cancel a print in progress
rename_existing: BASE_CANCEL_PRINT
gcode:
  PRINTER_STATE_CANCELLED
  PRESENT_PLATE
  PARK_EXTRUDER
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  SET_FAN_SPEED Fan=Bed SPEED=0.25 
  KINEMATICS_SAFE_DEFAULTS
  UPDATE_DELAYED_GCODE ID=DELAYED_SHUTDOWN DURATION=600  
  BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set RetractionDistance = params.E | default(-1.7) | float %}
  PRINTER_STATE_PAUSED
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=resume_z VALUE={act_z}
  {% if act_z < (max_z - 40) %}
      {% set z_safe = 40 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  PARK_EXTRUDER
  
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_resume_z: 300.0
gcode:
  {% set PrimeDistance = params.E | default(1.7) | float %}
  PRINTER_STATE_PRINTING
  G0 Z{resume_z} ; Return to safe Z height before moving in XY
  G91
  G1 E{PrimeDistance} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro TURN_OFF_HEATERS]
rename_existing: BASE_TURN_OFF_HEATERS
gcode:
  M141 S35  ; Cool chamber to something approaching room temperature
  BASE_TURN_OFF_HEATERS

[gcode_macro KINEMATICS_SAFE_DEFAULTS]
gcode:
  SET_VELOCITY_LIMIT VELOCITY=300 ACCEL=200 ACCEL_TO_DECEL=250 SQUARE_CORNER_VELOCITY=2
  SET_PRESSURE_ADVANCE ADVANCE=0.04 SMOOTH_TIME=0.040
  G90 ; Absolute positioning mode for XYZ

 
[gcode_macro END_PRINT]
gcode:
  PRINTER_STATE_SUCCESS
  # Move nozzle away from print while retracting
  M83 ; Relative E
  G91 ; Relative XYZ
  G1 X-2 Y-2 Z+5 E-3 F3000
  G90 ; Absolute XYZ
  ;M82 ; Absolute E
  PRESENT_PLATE
  PARK_EXTRUDER
  KINEMATICS_SAFE_DEFAULTS
  TURN_OFF_HEATERS
  M106 S50 ; Leave fan running to protect cooling ducts.
  SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target=30 min_speed=0.0
  UPDATE_DELAYED_GCODE ID=DELAYED_SHUTDOWN DURATION=600  

[gcode_macro PARK_EXTRUDER]
description: Move the extruder over the purge bucket and retract filament a short distance to prevent ooze.
gcode:
  {% set RetractionDistance = params.E | default(3) | float %}  
  {% set FeedRate = params.F | default(2000) | float %}
  M83 ; Relative E
  MOVE_TO_PURGE_BUCKET
  G1 E-{RetractionDistance} F{FeedRate}

# The following macro is used to auto-run actions after Klipper restart (or first powerup).
# Avoid causing any mechanical movements here, it could be unsafe for the user.
# It is best only to set default values for things here.
[delayed_gcode ON_RESTART]
initial_duration: 1
gcode:
  UPDATE_DELAYED_GCODE ID=ON_RESTART DURATION=0  # Only run once
  KINEMATICS_SAFE_DEFAULTS


[delayed_gcode DELAYED_SHUTDOWN]
initial_duration: 600
gcode:
  UPDATE_DELAYED_GCODE ID=DELAYED_SHUTDOWN DURATION=0  
  M106 S0   ; turn off part cooling fan
  SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target=0 min_speed=0
  SET_FAN_SPEED FAN=bed SPEED=0  ; turn off bed recirculation fan
  PRINTER_STATE_SHUTDOWN

[gcode_macro G29]
gcode:
  QGL_HOME_AND_CENTER

[gcode_macro G32]
gcode:
  QGL_HOME_AND_CENTER

[gcode_macro QGL_HOME_AND_CENTER]
gcode:
    ;BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    CENTER

[gcode_macro CENTER]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
  G0 X{posx} Y{posy} Z10 F{FeedRate}

# Moves the print head to a position over the centre of the bed and no lower than Z=200.
# If the print is higher than 200 mm, tries to raise Z by at least 50 mm, limited by the axis maximum.
[gcode_macro PRESENT_PLATE]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set min_z = 200.0 %}
  {% set toolhead_z = printer.toolhead.position.z|float %}
  {% set target_z = toolhead_z + 50 %}
  {% if target_z > max_z %}
    {% set target_z = max_z %}
  {% endif %}
  {% if target_z < min_z %}
    {% set target_z = min_z %}
  {% endif %}
  G0 X{posx} Y{posy} Z{target_z} F{FeedRate}

[gcode_macro LOAD_FILAMENT]
gcode:
  {% set LoadSpeed = params.SPEED | default(1800) | int %}
  {% set PrimeSpeed = params.PRIME_SPEED | default(400) | int %}
  {% set PurgeLength = params.PURGE_LENGTH | default(55) | int %}
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E5 F75
  G1 E50 F{LoadSpeed}
  clean_nozzle PURGE_SPEED={PrimeSpeed} PURGE_LENGTH={PurgeLength}
  RESTORE_GCODE_STATE NAME=__filament__load
  
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% set LoadSpeed = params.SPEED | default(1800) | int %}
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  FORM_TIP
  G1 E-50 F{LoadSpeed}
  G1 E-50 F{LoadSpeed}
  RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro M600]
gcode:
  CHANGE_FILAMENT  

[gcode_macro M601]
gcode:
    PAUSE

[gcode_macro CHANGE_FILAMENT]
description: Notifies the user to "change filament". Unloads the filament and pauses.
gcode:
  M117 Unloading
  MOVE_TO_PURGE_BUCKET
  UNLOAD_FILAMENT
  BEEP PITCH=440 DURATION=1000
  BEEP PITCH=880 DURATION=1000
  BEEP PITCH=440 DURATION=1000
  M117 Change Filament
  PAUSE
  M117

  
# StandAlone cooling moves to extract proper filament tip
[gcode_macro FORM_TIP]
gcode:
    SAVE_GCODE_STATE NAME=__form_tip
    G91
    G92 E0
    G1 E-9.05 F1200
    G1 E0.68 F165
    G1 E0.70 F168
    G1 E0.73 F177
    G1 E0.78 F189
    G1 E0.82 F197
    G1 E0.84 F204
    G1 E0.90 F216
    G1 E0.97 F234
    G1 E1.02 F246
    G1 E1.04 F250
    G1 E-15.00 F6000.0
    G1 E-24.50 F5400.0
    G1 E-7.00 F2700.0
    G1 E-3.50 F1620.0
    G1 E20.00 F900.0
    G1 E-13 F500.0
    G1 E13 F400.0
    G1 E-11 F500.0
    G1 E11 F400.0
    G1 E-2.00 F50.0
    G1 E-4.00 F1200.0
    G1 E-10.00 F2000
    G92 E0
    RESTORE_GCODE_STATE NAME=__form_tip



[gcode_macro EXERCISE_KINEMATICS]
gcode:
  {% set FeedRate = params.SPEED | default(12000) | int %}
  G28
  SET_LED_EFFECTS effect=critical_error
  G0 X50 Y50 Z50 F{FeedRate}
  G0 X300
  G0 Y300
  G0 X50
  G0 Y50
  G0 X300 Y300 Z300
  G0 X50
  G0 Y50
  G0 X300
  G0 Y300
  G0 X175 Y175 Z175
  G0 X50 Y50 Z50 F{FeedRate}
  G0 X300
  G0 Y300
  G0 X50
  G0 Y50
  G0 X300 Y300 Z50 F6000
  #M84 ; Motors off (forces re-home in case of lost steps)
  SET_LED_EFFECTS effect=critical_error STOP=1


[gcode_macro NOZZLE_CHANGE]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  PRESENT_PLATE
  FRONT_CENTER
  TOP
  G0 X100


[gcode_macro FRONT_RIGHT]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 15.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float + 15.0 %}
  G0 X{x_park} Y{y_park} F{FeedRate}

[gcode_macro FRONT_CENTER]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float + 15.0 %}
  G0 X{x_park} Y{y_park} F{FeedRate}

[gcode_macro TOP]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set z_park = printer.toolhead.axis_maximum.z|float - 50.0 %}
  G0 Z{z_park} F{FeedRate}

[gcode_macro CUBE_CENTRE]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set x_centre = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_centre = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set z_centre = printer.toolhead.axis_maximum.z|float / 2.0 %}
  G0 X{x_centre} Y{y_centre} Z{z_centre} F{FeedRate}

[gcode_macro HOME_CORNER]
gcode:
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 20.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 20.0 %}
  {% set z_park = printer.toolhead.axis_minimum.z|float + 50.0 %}
  CUBE_CENTRE FEED_RATE={FeedRate}
  G0 X{x_park} Y{y_park} Z{z_park} F{FeedRate}

[gcode_macro PID_TUNE_EXTRUDER]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=250

[gcode_macro PID_TUNE_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=110

[gcode_macro PA_CAL]
    # Pressure Advance Simple Test macro, using .4mm nozzle.
    # Usage: PA_CAL BED=100 EXTRUDER=240
    # First prints a line with current set PA, then prints 20 line segments
    # starting with 0 PA, increasing each line by 0.005.
    
gcode:
    {% set BED = params.BED|default(99)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(239)|float %}
    PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}

    G21 ; Millimeter units
    G90 ; Absolute XYZ
    M83 ; Relative E
    SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
    G92 E0
    M106 S0 

    G1 X120 Y70 F30000            ; move to start position
    G1 Z0.25 F300                 ; move to layer height
    G1 E0.75 F1800                ; un-retract
    G1 X140 Y70 E0.91798 F300     ; print line part one
    G1 X180 Y70 E1.83596 F9000    ; print line part two
    G1 X200 Y70 E0.91798 F300     ; print line part three
    G1 E-0.75 F1800               ; retract
    G1 Z1 F300                    ; Move above layer height  

    {% for i in range(0, 20) %}
      SET_PRESSURE_ADVANCE ADVANCE={i*0.005} ; set Pressure Advance
      M117 Testing Pressure Advance at: {i*0.005}
      G1 X120 Y{100+(5*i)} F30000            ; move to start position
      G1 Z0.25 F300                          ; move to layer height
      G1 E0.75 F1800                         ; un-retract
      G1 X140 Y{100+(5*i)} E0.91798 F300     ; print line part one
      G1 X180 Y{100+(5*i)} E1.83596 F9000    ; print line part two
      G1 X200 Y{100+(5*i)} E0.91798 F300     ; print line part three
      G1 E-0.75 F1800                        ; retract
      G1 Z1 F300                             ; Move above layer height  
    {% endfor %}

    PRINT_END

###
 # Some slightly dodgy macros that were used for testing various stepper configurations.
 # Best left commented because they are a bit risky.
###
 
#[gcode_macro RUN_TMC]
#description: Dumps TMC driver registers and runs a Z probe accuracy test
#gcode:
#  G28
#  CENTER
#  PROBE_TMC MICROSTEPS=4 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=8 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=16 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=32 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=64 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=128 INTERPOLATE=0
#  PROBE_TMC MICROSTEPS=256 INTERPOLATE=0

#[gcode_macro PROBE_TMC]
#description: Sets TMC microsteps and interpolation for each Z motor and performs a probe accuracy test
#gcode:
#  {% set msteps = params.MICROSTEPS | default(16) | int %}
#  {% set interpolation = params.INTERPOLATE | default(0) | int %}
#  {% set mres_values = {256:0, 128:1, 64:2, 32:3, 16:4, 8:5, 4:6, 2:7, 1:8} %}
#  {% set mres = mres_values[msteps] %}
#  { action_respond_info("Setting microsteps={msteps} interpolation={interpolation}") }
#  SET_TMC_FIELD STEPPER=stepper_z FIELD=mres VALUE={mres}
#  SET_TMC_FIELD STEPPER=stepper_z FIELD=intpol VALUE={interpolation}
#  SET_TMC_FIELD STEPPER=stepper_z1 FIELD=mres VALUE={mres}
#  SET_TMC_FIELD STEPPER=stepper_z1 FIELD=intpol VALUE={interpolation}
#  SET_TMC_FIELD STEPPER=stepper_z2 FIELD=mres VALUE={mres}
#  SET_TMC_FIELD STEPPER=stepper_z2 FIELD=intpol VALUE={interpolation}
#  SET_TMC_FIELD STEPPER=stepper_z3 FIELD=mres VALUE={mres}
#  SET_TMC_FIELD STEPPER=stepper_z3 FIELD=intpol VALUE={interpolation}
#  PROBE_ACCURACY SAMPLES=10

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

