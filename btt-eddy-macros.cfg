
# Uncomment this if you are using Eddy as the probe AND the homing endstop
#[TPL] but not if using homing_override (e.g. sensorless-homing) as they are mutually exclusive.
# [safe_z_home]
# home_xy_position: 150, 150 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
# z_hop: 10
# z_hop_speed: 25
# speed: 200

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[TPL] Only one save_variables section is allowed and it is defined in mmu_vars.cfg
# [save_variables]
# filename: ~/printer_data/config/variables.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# [delayed_gcode RESTORE_PROBE_OFFSET]
# initial_duration: 1.
# gcode:
#   {% set svv = printer.save_variables.variables %}
#   {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
#   {% endif %}

# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro _HOME_Z]
gcode:
  MOVE_PROBE_TO_CENTER
  G28 Z # [TPL] handle Eddy Z probe in homing override macros
  G0 Z15 # otherwise probe triggers immediately!
  #PROBE
  #SET_Z_FROM_PROBE
  #PARK_EXTRUDER

[gcode_macro EDDY_Z_CALIBRATE]
description: Uses the Eddy probe to determine the Z offset.
gcode:
  CENTER
  PROBE
  SET_Z_FROM_PROBE
  PARK_EXTRUDER

[gcode_macro MEASURE_Z_OFFSET]
description: Probes near the center of the bed but does not set anything.
gcode:
  MOVE_PROBE_TO_CENTER
  PROBE

[gcode_macro MOVE_PROBE_TO_CENTER]
description: Moves the Eddy Probe to the bed center.
gcode:
  {% set safe_height = 10 %}
  {% set FeedRate = params.FEED_RATE | default(12000) | int %}
  {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set cfs = printer.configfile.settings %}
  {% set cfc = printer.configfile.config %}
  {% set x_offset = cfc['probe_eddy_current btt_eddy'].x_offset | float %}
  {% set y_offset = cfc['probe_eddy_current btt_eddy'].y_offset | float %}
  {% set probex = posx - x_offset %}
  {% set probey = posy - y_offset %}
  { action_respond_info("Move to probe center X=%.3f Y=%.3f" % (probex, probey)) }
  G90 # Absolute positioning
  G0 X{probex} Y{probey} Z{safe_height} F{FeedRate}

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
# [gcode_macro Z_OFFSET_APPLY_PROBE]
# rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
# gcode:
#   SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



[gcode_macro SET_GCODE_OFFSET]
description: Set the GCode offset
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
# Uncomment the body if using the beta z-offset control, otherwise this macro should just pass through all the parameters.
#   {% if params.Z_ADJUST %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
#   {% endif %}
#   {% if params.Z %} 
#     {% set paramList = rawparams.split() %}
#     {% for i in range(paramList|length) %}
#       {% if paramList[i]=="Z=0" %}
#         {% set temp=paramList.pop(i) %}
#         {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#         {% if paramList.append(temp) %}{% endif %}
#       {% endif %}
#     {% endfor %}
#     {% set rawparams=paramList|join(' ') %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#   {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% else %}
    G0 Z5
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
 CENTER
 G0 Z5
 BTT_BED_MESH_CALIBRATE {rawparams} METHOD=rapid_scan
 PARK_EXTRUDER
 